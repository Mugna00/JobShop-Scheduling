from Task import *
from CSP import *
from Draw import *


class Test:
    def TestCar(self, title):
        jobs = list()
        task_axleF = Task(random.randint(1, 22), [], 'axleF')
        task_axleB = Task(random.randint(1, 22), [], 'axleB')
        task_axleF.addDisjunctive(task_axleB)
        task_axleB.addDisjunctive(task_axleF)
        task_wheelF = Task(random.randint(1, 22), [task_axleF], 'wheelF')
        task_wheelB = Task(random.randint(1, 22), [task_axleB], 'wheelB')
        task_nutsF = Task(random.randint(1, 22), [task_wheelF], 'nutsF')
        task_nutsB = Task(random.randint(1, 22), [task_wheelB], 'nutsB')
        task_capF = Task(random.randint(1, 22), [task_nutsF], 'capF')
        task_capB = Task(random.randint(1, 22), [task_nutsB], 'capB')
        task_inspect = Task(random.randint(1, 22),
                            [task_axleF, task_axleB, task_wheelF, task_wheelB, task_nutsF, task_nutsB, task_capF,
                             task_capB], 'inspect')
        jobs.append(task_axleB)
        jobs.append(task_axleF)
        jobs.append(task_wheelF)
        jobs.append(task_wheelB)
        jobs.append(task_nutsF)
        jobs.append(task_nutsB)
        jobs.append(task_capF)
        jobs.append(task_capB)
        jobs.append(task_inspect)
        csp = CSP(jobs)
        b = Backtracking(csp, 3)
        draw = Draw(b, title)
        draw.drawTable()
        draw.drawSolution()

    def Test1(self, title):
        tasks = []
        task1 = Task(random.randint(1, 22), [], 'Task1')
        task2 = Task(random.randint(1, 22), [], 'Task2')
        task3 = Task(random.randint(1, 22), [], 'Task3')
        task4 = Task(random.randint(1, 22), [task1, task2, task3], 'Task4')
        task1.addDisjunctive(task2)
        task1.addDisjunctive(task3)
        task2.addDisjunctive(task1)
        task2.addDisjunctive(task3)
        task3.addDisjunctive(task1)
        task3.addDisjunctive(task2)
        task5 = Task(random.randint(1, 22), [task4], 'Task5')
        task6 = Task(random.randint(1, 22), [task4], 'Task6')
        task7 = Task(random.randint(1, 22), [task4], 'Task7')
        task8 = Task(random.randint(1, 22), [task5, task6, task7], 'Task8')
        tasks.append(task1)
        tasks.append(task2)
        tasks.append(task3)
        tasks.append(task4)
        tasks.append(task5)
        tasks.append(task6)
        tasks.append(task7)
        tasks.append(task8)
        csp = CSP(tasks)
        b = Backtracking(csp, random.randint(2, 4))
        draw = Draw(b, title)
        draw.drawTable()
        draw.drawSolution()

    def Test2(self, title):
        tasks = []
        task1 = Task(random.randint(1, 22), [], 'Task1')
        task2 = Task(random.randint(1, 22), [task1], 'Task2')
        task3 = Task(random.randint(1, 22), [task1], 'Task3')
        task4 = Task(random.randint(1, 22), [task1], 'Task4')
        task2.addDisjunctive(task3)
        task2.addDisjunctive(task4)
        task3.addDisjunctive(task2)
        task3.addDisjunctive(task4)
        task4.addDisjunctive(task2)
        task4.addDisjunctive(task3)
        task5 = Task(random.randint(1, 22), [task2], 'Task5')
        task6 = Task(random.randint(1, 22), [task3], 'Task6')
        task7 = Task(random.randint(1, 22), [task4], 'Task7')
        task8 = Task(random.randint(1, 22), [task5, task6, task7], 'Task8')
        tasks.append(task1)
        tasks.append(task2)
        tasks.append(task3)
        tasks.append(task4)
        tasks.append(task5)
        tasks.append(task6)
        tasks.append(task7)
        tasks.append(task8)
        csp = CSP(tasks)
        b = Backtracking(csp, random.randint(2, 4))
        draw = Draw(b, title)
        draw.drawTable()
        draw.drawSolution()
